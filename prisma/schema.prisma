generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String    @unique
  password      String
  primaryListId String?
  List          List[]    @relation("project")
  Share         Share[]
  primaryList   List?     @relation(fields: [primaryListId], references: [id])
  Comment       Comment[]
}

model List {
  id         String  @id @default(uuid())
  name       String  @db.VarChar(30)
  userId     String
  color      String?
  shareToken String?
  user       User    @relation("project", fields: [userId], references: [id], onDelete: Cascade)
  Share      Share[]
  tasks      Task[]
  User       User[]
}

model Share {
  listId String
  userId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([listId, userId])
  @@index([listId])
}

model Task {
  id             String         @id @default(cuid())
  title          String         @db.VarChar(250)
  important      Boolean        @default(false)
  completed      Boolean        @default(false)
  createAt       DateTime       @default(now()) @db.Date
  dueDate        DateTime?      @db.Date
  repeatInterval RepeatInterval @default(NONE)
  repeatCount    Int?
  listId         String
  order          Int            @default(autoincrement())
  description    String?        @db.VarChar(512)
  priority       Priority?
  subTasks       SubTask[]
  list           List           @relation(fields: [listId], references: [id], onDelete: Cascade)
  Comments       Comment[]

  @@index([id, listId])
}

model SubTask {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(125)
  completed   Boolean  @default(false)
  taskId      String
  description String?  @db.VarChar(255)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createAt    DateTime @default(now()) @db.Timestamp()

  @@index([id, taskId, createAt])
}

model Comment {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  text     String   @db.VarChar(255)
  taskId   String
  userId   String
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([id, taskId])
}

enum Priority {
  PRIORITY1
  PRIORITY2
  PRIORITY3
  PRIORITY4
}

enum RepeatInterval {
  NONE
  DAILY
  WEEKLY
  YEARLY
  MONTHLY
}
